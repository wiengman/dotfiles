;; Variables
(defvar eww "eww -c $HOME/.config/eww")
(defvar reveal_power false)

;; Listening
(defpoll music :interval "1s" "playerctl --player=spotify metadata --format '{{ artist }} - {{ title }}' || true")
(defpoll music_state :interval "1s" "playerctl --player=spotify status metadata")

;; Polling
(defpoll get_volume :interval "1s" "./get_volume.sh" )
(defpoll get_volume_spotify :interval "1s" "./get_volume_spotify.sh" )
(defpoll time :interval "10s" "date '+%H:%M %b %d, %Y'")

;; Widgets
(defwidget bar []
(centerbox :orientation "h"
    (left)
    (music)
    (sidestuff)))

;; Powermenu Widgets
(defwidget power []
	(eventbox	:onhover "${eww} update reveal_power=true"	
            :onhoverlost "${eww} update reveal_power=false"

    (box :orientation "h"					
         :space-evenly "false" 	 
         :hexpand "false" 	
         :class "powermenu"

    (button :class "power-symbol" "‚èª ")

      (revealer	:transition "slideright"				
                :reveal reveal_power
                :duration "300ms"

      	(eventbox	:cursor "pointer"

          (box :orientation "h"
             :space-evenly "false"

            (button :class "power-button"
                  :onclick "shutdown -h now" "Shutdown")

            (button :class "power-button"
                  :tooltip "Reboot"
                  :onclick "reboot" "Reboot")))))))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "Volume:"
            :value get_volume
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
    (metric :label "Spotify:"
            :value get_volume_spotify
            :onchange "./set_volume_spotify.sh {}")
    (metric :label "Memory: "
            :value {EWW_RAM.used_mem_perc}
            :tooltip "${round(EWW_RAM.used_mem/1000000000, 1)}/${round(EWW_RAM.total_mem/(1000000000), 1)}"
            :onchange "")
    (metric :label "Network:"
            :value {round(EWW_NET.enp4s0.NET_DOWN*8/250, 0)}
            :onchange "")
    time))

(defwidget left []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly false
        :halign "start"
       :spacing 10
    (power)
    ))

(defwidget music []
  (eventbox
    :cursor "pointer"
    (box :class "music"
      :orientation "h"
      :space-evenly false
      :halign "center"
      (button :width 32 :onclick "playerctl previous --player=spotify" "‚óÄ")
      (button :width 32 :onclick "playerctl play-pause --player=spotify" {music != "" ? (music_state =~ "Paused" ? "${music}" : "üéµ ${music} üéµ") : ""})
      (button :width 32 :onclick "playerctl next --player=spotify" "‚ñ∂"))))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwindow bar
  :windowtype "normal"
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "32px"
                      :anchor "top center")
  (bar))
